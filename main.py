import asyncio
import aiohttp
import pybase64
import base64
import requests
import binascii
import os
import re
import zipfile
import socket
import shutil
import IP2Location
import ipaddress
import concurrent.futures
from urllib.parse import urlparse, parse_qs
from more_thread_sort import sort_nodes

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
TIMEOUT = 30

def decode_base64(encoded):
    decoded = ""
    # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–∫–∞—Ö
    for encoding in ["utf-8", "iso-8859-1"]:
        try:
            decoded = pybase64.b64decode(encoded + b"=" * (-len(encoded) % 4)).decode(encoding)
            break
        except (UnicodeDecodeError, binascii.Error):
            pass
    return decoded

async def fetch_link(session, url):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Å—ã–ª–∫–∏ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ base64."""
    try:
        async with session.get(url, timeout=TIMEOUT) as resp:
            content = await resp.read()
            decoded = decode_base64(content)
            print(f'–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: {url}\n–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞!')
            return decoded
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
        return ""

async def fetch_dir_link(session, url):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)."""
    try:
        async with session.get(url, timeout=TIMEOUT) as resp:
            text = await resp.text()
            print(f'–ü–æ–ª—É—á–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {url}\n–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–∞!')
            return text
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}: {e}")
        return ""

async def fetch_all_links(links, dir_links):
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
    async with aiohttp.ClientSession() as session:
        tasks = []
        for url in links:
            tasks.append(fetch_link(session, url))
        for url in dir_links:
            tasks.append(fetch_dir_link(session, url))
        results = await asyncio.gather(*tasks)
        return results

def is_valid_ipv4(host):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ host —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º IPv4-–∞–¥—Ä–µ—Å–æ–º (–±–µ–∑ –¥–æ–º–µ–Ω–Ω—ã—Ö –∏–º–µ–Ω –∏ IPv6)."""
    try:
        ip = ipaddress.ip_address(host)
        return ip.version == 4
    except ValueError:
        return False

def filter_for_allowed_protocols(data, allowed_protocols):
    """
    –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, —á—Ç–æ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    –∏ —É –∫–æ—Ç–æ—Ä—ã—Ö host —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º IPv4-–∞–¥—Ä–µ—Å–æ–º.
    """
    filtered_data = []
    pattern = re.compile(r'^(vless|trojan|tuic|hy2)://', re.IGNORECASE)
    for entry in data:
        entry = entry.strip()
        if any(entry.startswith(proto) for proto in allowed_protocols):
            m = re.search(r'^(vless|trojan|tuic|hy2)://(?:[^@]+@)?([^:/?#]+)(?::(\d+))', entry, re.IGNORECASE)
            if m:
                host = m.group(2)
                if is_valid_ipv4(host):
                    filtered_data.append(entry)
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å host, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å
    return filtered_data

def remove_duplicates(configs):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Ö–æ—Å—Ç–∞ –∏ –ø–æ—Ä—Ç–∞.
    –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç, –æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø–∏—Å—å —Å –±–æ–ª—å—à–µ–π –¥–ª–∏–Ω–æ–π.
    """
    unique = {}
    pattern = re.compile(r'^(vless|trojan|tuic|hy2)://(?:[^@]+@)?([^:/?#]+)(?::(\d+))', re.IGNORECASE)
    for config in configs:
        match = pattern.search(config)
        if match:
            host = match.group(2)
            port = match.group(3)
            key = (host, port)
            if key in unique:
                if len(config) > len(unique[key]):
                    unique[key] = config
            else:
                unique[key] = config
        else:
            unique[config] = config
    return list(unique.values())

def get_flag_emoji(country_code):
    """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –≤ —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥."""
    if not country_code or len(country_code) != 2:
        return ""
    offset = 127397
    return ''.join(chr(ord(c) + offset) for c in country_code.upper())

def setup_ip2location(db_url, temp_dir):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∞ –±–∞–∑—ã IP2Location.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ BIN-—Ñ–∞–π–ª—É –∏ –ø—É—Ç—å –∫ zip-–∞—Ä—Ö–∏–≤—É.
    """
    response = requests.get(db_url, stream=True, timeout=TIMEOUT)
    zip_path = os.path.join(temp_dir, "IP2LOCATION-LITE-DB1.BIN.ZIP")
    with open(zip_path, "wb") as f:
        f.write(response.content)
    with zipfile.ZipFile(zip_path, "r") as zip_ref:
        zip_ref.extractall(temp_dir)
    bin_file = os.path.join(temp_dir, "IP2LOCATION-LITE-DB1.BIN")
    return bin_file, zip_path

def format_profile(config, ip2_db):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Ç—Ä–µ–±—É–µ–º—ã–π –≤–∏–¥.
    –ò–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL (–ø—Ä–æ—Ç–æ–∫–æ–ª, host, –ø–æ—Ä—Ç, —Ç–∏–ø —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ security),
    –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞, –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã,
    –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
    "#üîí TR-WS-TLS | <—Ñ–ª–∞–≥> | 104.19.223.79:443"
    """
    try:
        parsed = urlparse(config)
        scheme = parsed.scheme.lower()
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        proto_map = {"trojan": "TR", "vless": "VL", "tuic": "TC", "hy2": "HY"}
        proto_abbr = proto_map.get(scheme, scheme.upper())
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ userinfo –∏ host:port
        netloc = parsed.netloc
        if "@" in netloc:
            _, host_port = netloc.split("@", 1)
        else:
            host_port = netloc
        if ":" in host_port:
            host, port = host_port.split(":", 1)
        else:
            host = host_port
            port = ""
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
        qs = parse_qs(parsed.query)
        type_val = qs.get("type", [""])[0].upper()
        security_val = qs.get("security", [""])[0].upper()
        profile_label = f"{proto_abbr}"
        if type_val:
            profile_label += f"-{type_val}"
        if security_val:
            profile_label += f"-{security_val}"
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞ —Å—Ç—Ä–∞–Ω—ã
        flag = ""
        try:
            rec = ip2_db.get_all(host)
            country_code = rec.country_short
            flag = get_flag_emoji(country_code)
        except Exception:
            flag = ""
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        final_comment = f"üîí {profile_label} | {flag} | {host}:{port}"
        # –ó–∞–º–µ–Ω–∞ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
        if "#" in config:
            base_part = config.split("#", 1)[0]
            new_config = f"{base_part}#{final_comment}"
        else:
            new_config = f"{config}#{final_comment}"
        return new_config
    except Exception:
        return config

def enrich_configs(configs, ip2_db):
    """
    –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    """
    enriched = []
    with concurrent.futures.ThreadPoolExecutor() as executor:
        futures = {executor.submit(format_profile, config, ip2_db): config for config in configs}
        for future in concurrent.futures.as_completed(futures):
            try:
                enriched.append(future.result())
            except Exception:
                pass
    return enriched

def separate_and_sort_configs(configs):
    """
    –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–ª–∏–Ω—ã.
    """
    protocols = ["vless", "trojan", "tuic", "hy2"]
    separated = {proto: [] for proto in protocols}
    pattern = re.compile(r'^(vless|trojan|tuic|hy2)://', re.IGNORECASE)
    for config in configs:
        match = pattern.match(config)
        if match:
            proto = match.group(1).lower()
            separated[proto].append(config)
    for proto in separated:
        separated[proto].sort(key=lambda x: len(x), reverse=True)
    return separated

def ensure_directories_exist():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    output_folder = os.path.abspath(os.getcwd())
    base64_folder = os.path.join(output_folder, "Base64")
    subs_folder = os.path.join(output_folder, "Subs")
    os.makedirs(output_folder, exist_ok=True)
    os.makedirs(base64_folder, exist_ok=True)
    os.makedirs(subs_folder, exist_ok=True)
    return output_folder, base64_folder, subs_folder

def write_results(separated_configs, output_folder, base64_folder, subs_folder):
    """
    –ó–∞–ø–∏—Å—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª, –∞ –∑–∞—Ç–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º.
    –ö–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 600 –∑–∞–ø–∏—Å–µ–π —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º base64‚Äë–∞–Ω–∞–ª–æ–≥–æ–≤.
    """
    all_subs_path = os.path.join(output_folder, "All_Subs.txt")
    if os.path.exists(all_subs_path):
        os.remove(all_subs_path)
    for i in range(20):
        file_path = os.path.join(subs_folder, f"Sub{i}.txt")
        if os.path.exists(file_path):
            os.remove(file_path)
    with open(all_subs_path, "w", encoding='utf-8') as f:
        for proto in separated_configs:
            for config in separated_configs[proto]:
                f.write(config + "\n")
    for proto in separated_configs:
        proto_filename = os.path.join(output_folder, f"{proto}_Subs.txt")
        with open(proto_filename, "w", encoding='utf-8') as f:
            for config in separated_configs[proto]:
                f.write(config + "\n")
        with open(proto_filename, "r", encoding='utf-8') as f:
            lines = f.readlines()
        num_lines = len(lines)
        max_lines_per_file = 600
        num_files = (num_lines + max_lines_per_file - 1) // max_lines_per_file
        for i in range(num_files):
            sub_file_path = os.path.join(subs_folder, f"{proto}_Sub{i+1}.txt")
            with open(sub_file_path, "w", encoding='utf-8') as sub_f:
                start_index = i * max_lines_per_file
                end_index = min((i + 1) * max_lines_per_file, num_lines)
                sub_f.writelines(lines[start_index:end_index])
            with open(sub_file_path, "r", encoding='utf-8') as input_file:
                config_data = input_file.read()
            base64_filename = os.path.join(base64_folder, f"{proto}_Sub{i+1}_base64.txt")
            with open(base64_filename, "w", encoding='utf-8') as output_file:
                encoded_config = base64.b64encode(config_data.encode()).decode()
                output_file.write(encoded_config)

def cleanup_ip2location(bin_file, zip_file, temp_dir):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –±–∞–∑—ã IP2Location."""
    try:
        os.remove(bin_file)
        os.remove(zip_file)
        shutil.rmtree(temp_dir)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

async def async_main():
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    output_folder, base64_folder, subs_folder = ensure_directories_exist()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã IP2Location
    ip2location_url = "https://download.ip2location.com/lite/IP2LOCATION-LITE-DB1.BIN.ZIP"
    temp_dir = os.path.join(output_folder, "temp_ip2location")
    os.makedirs(temp_dir, exist_ok=True)
    bin_file, zip_file = setup_ip2location(ip2location_url, temp_dir)
    ip2_db = IP2Location.IP2Location(bin_file)
    
    # –°–ø–∏—Å–∫–∏ —Å—Å—ã–ª–æ–∫ (–¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π)
    links = [
        "https://raw.githubusercontent.com/MrMohebi/xray-proxy-grabber-telegram/master/collected-proxies/row-url/all.txt",
        "https://raw.githubusercontent.com/ALIILAPRO/v2rayNG-Config/refs/heads/main/server.txt",
        "https://raw.githubusercontent.com/barry-far/V2ray-Configs/main/All_Configs_Sub.txt",
        "https://raw.githubusercontent.com/Epodonios/v2ray-configs/main/All_Configs_Sub.txt",
        "https://raw.githubusercontent.com/lagzian/SS-Collector/refs/heads/main/VLESS/VL100.txt",
        "https://raw.githubusercontent.com/lagzian/new-configs-collector/main/protocols/hysteria",
        "https://raw.githubusercontent.com/lagzian/SS-Collector/main/reality.txt",
        "https://raw.githubusercontent.com/sevcator/5ubscrpt10n/refs/heads/main/protocols/vl.txt",
        "https://raw.githubusercontent.com/sevcator/5ubscrpt10n/refs/heads/main/protocols/tr.txt",
        "https://raw.githubusercontent.com/MhdiTaheri/V2rayCollector/refs/heads/main/sub/hysteria",
        "https://raw.githubusercontent.com/MhdiTaheri/V2rayCollector/refs/heads/main/sub/trojan",
        "https://raw.githubusercontent.com/MhdiTaheri/V2rayCollector/refs/heads/main/sub/tuic",
        "https://raw.githubusercontent.com/MhdiTaheri/V2rayCollector/refs/heads/main/sub/vless",
        "https://raw.githubusercontent.com/wuqb2i4f/xray-config-toolkit/refs/heads/main/output/base64/mix-protocol-vl",
        "https://raw.githubusercontent.com/wuqb2i4f/xray-config-toolkit/refs/heads/main/output/base64/mix-protocol-tr",
        "https://raw.githubusercontent.com/soroushmirzaei/telegram-configs-collector/main/protocols/hysteria",
        "https://raw.githubusercontent.com/soroushmirzaei/telegram-configs-collector/main/protocols/tuic",
        "https://raw.githubusercontent.com/soroushmirzaei/telegram-configs-collector/main/protocols/reality",
        "https://raw.githubusercontent.com/soroushmirzaei/telegram-configs-collector/main/protocols/vless",
        "https://raw.githubusercontent.com/soroushmirzaei/telegram-configs-collector/main/protocols/trojan",
        "https://raw.githubusercontent.com/LalatinaHub/Mineral/refs/heads/master/result/nodes",
        "https://raw.githubusercontent.com/Vauth/node/main/Main",
        "https://raw.githubusercontent.com/Surfboardv2ray/Proxy-sorter/main/output/converted.txt",
        "https://raw.githubusercontent.com/Surfboardv2ray/Proxy-sorter/main/selector/random",
        "https://raw.githubusercontent.com/Surfboardv2ray/Proxy-sorter/main/ws_tls/proxies/wstls",
        "https://raw.githubusercontent.com/Surfboardv2ray/Proxy-sorter/main/custom/udp.txt",
        "https://raw.githubusercontent.com/Surfboardv2ray/TGParse/main/splitted/mixed",
        "https://raw.githubusercontent.com/AvenCores/goida-vpn-configs/refs/heads/main/one_file_vpn.txt",
        "https://raw.githubusercontent.com/AvenCores/goida-vpn-configs/refs/heads/main/two_file_vpn.txt",
        "https://raw.githubusercontent.com/AvenCores/goida-vpn-configs/refs/heads/main/three_file_vpn.txt",
        "https://raw.githubusercontent.com/AvenCores/goida-vpn-configs/refs/heads/main/four_file_vpn.txt",
        "https://raw.githubusercontent.com/AvenCores/goida-vpn-configs/refs/heads/main/five_file_vpn.txt",
        "https://raw.githubusercontent.com/AvenCores/goida-vpn-configs/refs/heads/main/six_file_vpn.txt",
        "https://raw.githubusercontent.com/AvenCores/goida-vpn-configs/refs/heads/main/seven_file_vpn.txt",
        "https://raw.githubusercontent.com/Mahdi0024/ProxyCollector/master/sub/proxies.txt",
        "https://raw.githubusercontent.com/dimzon/scaling-sniffle/main/all-sort.txt",
        "https://raw.githubusercontent.com/4n0nymou3/multi-proxy-config-fetcher/refs/heads/main/configs/proxy_configs.txt",
        "https://raw.githubusercontent.com/MhdiTaheri/V2rayCollector_Py/main/sub/United%20States/config.txt",
        "https://raw.githubusercontent.com/MhdiTaheri/V2rayCollector_Py/main/sub/Italy/config.txt",
        "https://raw.githubusercontent.com/MhdiTaheri/V2rayCollector_Py/main/sub/Germany/config.txt",
        "https://raw.githubusercontent.com/MhdiTaheri/V2rayCollector_Py/main/sub/Finland/config.txt",
        "https://raw.githubusercontent.com/MhdiTaheri/V2rayCollector_Py/main/sub/Sweden/config.txt",
        "https://raw.githubusercontent.com/MhdiTaheri/V2rayCollector_Py/main/sub/United%20Kingdom/config.txt",
        "https://raw.githubusercontent.com/MhdiTaheri/V2rayCollector_Py/main/sub/Poland/config.txt",
        "https://raw.githubusercontent.com/MhdiTaheri/V2rayCollector_Py/main/sub/Netherlands/config.txt",
        "https://raw.githubusercontent.com/MhdiTaheri/V2rayCollector_Py/main/sub/Ireland/config.txt",
        "https://raw.githubusercontent.com/Leon406/SubCrawler/refs/heads/main/sub/share/a11",
        "https://raw.githubusercontent.com/Everyday-VPN/Everyday-VPN/main/subscription/main.txt",
        "https://raw.githubusercontent.com/Barabama/FreeNodes/refs/heads/main/nodes/yudou66.txt",
        "https://raw.githubusercontent.com/40OIL/domain.club/refs/heads/main/mci1.txt",
        "https://raw.githubusercontent.com/40OIL/domain.club/refs/heads/main/mci2.txt",
        "https://raw.githubusercontent.com/40OIL/domain.club/refs/heads/main/mci3.txt",
        "https://raw.githubusercontent.com/40OIL/domain.club/refs/heads/main/mci4.txt",
        "https://raw.githubusercontent.com/40OIL/domain.club/refs/heads/main/mtn1.txt",
        "https://raw.githubusercontent.com/40OIL/domain.club/refs/heads/main/mtn2.txt",
        "https://raw.githubusercontent.com/40OIL/domain.club/refs/heads/main/mtn3.txt",
        "https://raw.githubusercontent.com/40OIL/domain.club/refs/heads/main/mtn4.txt",
        "https://raw.githubusercontent.com/40OIL/domain.club/refs/heads/main/07pr4n27.txt",
    ]
    # –ï—Å–ª–∏ –∏–º–µ—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏, –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫
    dir_links = []
    
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    raw_data = await fetch_all_links(links, dir_links)
    combined_data = []
    for data in raw_data:
        if data:
            combined_data.extend(data.splitlines())
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º –∏ –≤–∞–ª–∏–¥–Ω—ã–º IPv4
    allowed_protocols = ["vless://", "trojan://", "tuic://", "hy2://"]
    filtered_configs = filter_for_allowed_protocols(combined_data, allowed_protocols)
    # –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    unique_configs = remove_duplicates(filtered_configs)
    # –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
    enriched_configs = enrich_configs(unique_configs, ip2_db)
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    separated_configs = separate_and_sort_configs(enriched_configs)
    # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª—ã
    write_results(separated_configs, output_folder, base64_folder, subs_folder)
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –±–∞–∑—ã IP2Location
    cleanup_ip2location(bin_file, zip_file, temp_dir)
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É–∑–ª–æ–≤ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ)
    with concurrent.futures.ThreadPoolExecutor() as executor:
        executor.submit(sort_nodes)

def main():
    asyncio.run(async_main())
    # –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —É–∑–ª–æ–≤
    sort_nodes()

if __name__ == "__main__":
    main()
